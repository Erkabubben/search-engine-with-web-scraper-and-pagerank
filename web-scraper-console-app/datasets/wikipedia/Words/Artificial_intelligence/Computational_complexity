computational complexity from wikipedia the free encyclopedia jump to navigation jump to search amount of resources to perform an algorithm this article includes a list of references related reading or external links but its sources remain unclear because it lacks inline citations please help to improve this article by introducing more precise citations december 2017 learn how and when to remove this template message in computer science the computational complexity or simply complexity of an algorithm is the amount of resources required to run it particular focus is given to computation time generally measured by the number of needed elementary operations and memory storage requirements the complexity of a problem is the complexity of the best algorithms that allow solving the problem the study of the complexity of explicitly given algorithms is called analysis of algorithms while the study of the complexity of problems is called computational complexity theory both areas are highly related as the complexity of an algorithm is always an upper bound on the complexity of the problem solved by this algorithm moreover for designing efficient algorithms it is often fundamental to compare the complexity of a specific algorithm to the complexity of the problem to be solved also in most cases the only thing that is known about the complexity of a problem is that it is lower than the complexity of the most efficient known algorithms therefore there is a large overlap between analysis of algorithms and complexity theory as the amount of resources required to run an algorithm generally varies with the size of the input the complexity is typically expressed as a function n f n where n is the size of the input and f n is either the worst case complexity the maximum of the amount of resources that are needed over all inputs of size n or the average case complexity the average of the amount of resources over all inputs of size n time complexity is generally expressed as the number of required elementary operations on an input of size n where elementary operations are assumed to take a constant amount of time on a given computer and change only by a constant factor when run on a different computer space complexity is generally expressed as the amount of memory required by an algorithm on an input of size n contents 1 resources 1 1 time 1 2 bit complexity 1 3 space 1 4 communication 1 5 others 2 complexity as a function of input size 3 asymptotic complexity 4 models of computation 4 1 deterministic models 4 2 non deterministic computation 4 3 parallel and distributed computation 4 4 quantum computing 5 problem complexity lower bounds 6 use in algorithm design 7 see also 8 references resources edit time edit the resource that is most commonly considered is time when complexity is used without qualification this generally means time complexity the usual units of time seconds minutes etc are not used in complexity theory because they are too dependent on the choice of a specific computer and on the evolution of technology for instance a computer today can execute an algorithm significantly faster than a computer from the 1960s however this is not an intrinsic feature of the algorithm but rather a consequence of technological advances in computer hardware complexity theory seeks to quantify the intrinsic time requirements of algorithms that is the basic time constraints an algorithm would place on any computer this is achieved by counting the number of elementary operations that are executed during the computation these operations are assumed to take constant time that is not affected by the size of the input on a given machine and are often called steps bit complexity edit formally the bit complexity refers to the number of operations on bits that are needed for running an algorithm with most models of computation it equals the time complexity up to a constant factor on computers the number of operations on machine words that are needed is also proportional to the bit complexity so the time complexity and the bit complexity are equivalent for realistic models of computation space edit another important resource is the size of computer memory that is needed for running algorithms communication edit main article communication complexity for the class of distributed algorithms that are commonly executed by multiple interacting parties the resource that is of most interest is the communication complexity it is the necessary amount of communication between the executing parties others edit the number of arithmetic operations is another resource that is commonly used in this case one talks of arithmetic complexity if one knows an upper bound on the size of the binary representation of the numbers that occur during a computation the time complexity is generally the product of the arithmetic complexity by a constant factor for many algorithms the size of the integers that are used during a computation is not bounded and it is not realistic to consider that arithmetic operations take a constant time therefore the time complexity generally called bit complexity in this context may be much larger than the arithmetic complexity for example the arithmetic complexity of the computation of the determinant of a n n integer matrix is o n 3 displaystyle o n 3 for the usual algorithms gaussian elimination the bit complexity of the same algorithms is exponential in n because the size of the coefficients may grow exponentially during the computation on the other hand if these algorithms are coupled with multi modular arithmetic the bit complexity may be reduced to o n4 in sorting and searching the resource that is generally considered is the number of entry comparisons this is generally a good measure of the time complexity if data are suitably organized complexity as a function of input size edit only time complexity is considered in this section but everything applies with slight modifications to the complexity with respect to other resources it is impossible to count the number of steps of an algorithm on all possible inputs as the complexity generally increases with the size of the input the complexity is typically expressed as a function of the size n in bits of the input and therefore the complexity is a function of n however the complexity of an algorithm may vary dramatically for different inputs of the same size therefore several complexity functions are commonly used the worst case complexity is the maximum of the complexity over all inputs of size n and the average case complexity is the average of the complexity over all inputs of size n this makes sense as the number of possible inputs of a given size is finite generally when complexity is used without being further specified this is the worst case time complexity that is considered asymptotic complexity edit see also asymptotic computational complexity it is generally difficult to compute precisely the worst case and the average case complexity in addition these exact values provide little practical application as any change of computer or of model of computation would change the complexity somewhat moreover the resource use is not critical for small values of n and this makes that for small n the ease of implementation is generally more interesting than a low complexity for these reasons one generally focuses on the behavior of the complexity for large n that is on its asymptotic behavior when n tends to the infinity therefore the complexity is generally expressed by using big o notation for example the usual algorithm for integer multiplication has a complexity of o n 2 displaystyle o n 2 this means that there is a constant c u displaystyle c u such that the multiplication of two integers of at most n digits may be done in a time less than c u n 2 displaystyle c u n 2 this bound is sharp in the sense that the worst case complexity and the average case complexity are x03a9 n 2 displaystyle omega n 2 which means that there is a constant c l displaystyle c l such that these complexities are larger than c l n 2 displaystyle c l n 2 the radix does not appear in these complexity as changing of radix changes only the constants c u displaystyle c u and c l displaystyle c l models of computation edit the evaluation of the complexity relies on the choice of a model of computation which consists in defining the basic operations that are done in a unit of time when the model of computation is not explicitly specified this is generally meant as being multitape turing machine deterministic models edit a deterministic model of computation is a model of computation such that the successive states of the machine and the operations to be performed are completely determined by the preceding state historically the first deterministic models were recursive functions lambda calculus and turing machines the model of random access machines also called ram machines is also widely used as a closer counterpart to real computers when the model of computation is not specified it is generally assumed to be a multitape turing machine for most algorithms the time complexity is the same on multitape turing machines as on ram machines although some care may be needed in how data is stored in memory to get this equivalence non deterministic computation edit in a non deterministic model of computation such as non deterministic turing machines some choices may be done at some steps of the computation in complexity theory one considers all possible choices simultaneously and the non deterministic time complexity is the time needed when the best choices are always done in other words one considers that the computation is done simultaneously on as many identical processors as needed and the non deterministic computation time is the time spent by the first processor that finishes the computation this parallelism is partly amenable to quantum computing via superposed entangled states in running specific quantum algorithms like e g shor s factorization of yet only small integers as of march 160 2018 91 update 93 21 3 7 even when such a computation model is not realistic yet it has theoretical importance mostly related to the p np problem which questions the identity of the complexity classes formed by taking polynomial time and non deterministic polynomial time as least upper bounds simulating an np algorithm on a deterministic computer usually takes exponential time a problem is in the complexity class np if it may be solved in polynomial time on a non deterministic machine a problem is np complete if roughly speaking it is in np and is not easier than any other np problem many combinatorial problems such as the knapsack problem the travelling salesman problem and the boolean satisfiability problem are np complete for all these problems the best known algorithm has exponential complexity if any one of these problems could be solved in polynomial time on a deterministic machine then all np problems could also be solved in polynomial time and one would have p np as of 2017 91 update 93 it is generally conjectured that p np with the practical implication that the worst cases of np problems are intrinsically difficult to solve i e take longer than any reasonable time span decades for interesting lengths of input parallel and distributed computation edit main articles parallel computing and distributed computing parallel and distributed computing consist of splitting computation on several processors which work simultaneously the difference between the different model lies mainly in the way of transmitting information between processors typically in parallel computing the data transmission between processors is very fast while in distributed computing the data transmission is done through a network and is therefore much slower the time needed for a computation on n processors is at least the quotient by n of the time needed by a single processor in fact this theoretically optimal bound can never be reached because some subtasks cannot be parallelized and some processors may have to wait a result from another processor the main complexity problem is thus to design algorithms such that the product of the computation time by the number of processors is as close as possible to the time needed for the same computation on a single processor quantum computing edit a quantum computer is a computer whose model of computation is based on quantum mechanics the church turing thesis applies to quantum computers that is every problem that can be solved by a quantum computer can also be solved by a turing machine however some problems may theoretically be solved with a much lower time complexity using a quantum computer rather than a classical computer this is for the moment purely theoretical as no one knows how to build an efficient quantum computer quantum complexity theory has been developed to study the complexity classes of problems solved using quantum computers it is used in post quantum cryptography which consists of designing cryptographic protocols that are resistant to attacks by quantum computers problem complexity lower bounds edit the complexity of a problem is the infimum of the complexities of the algorithms that may solve the problem including unknown algorithms thus the complexity of a problem is not greater than the complexity of any algorithm that solves the problems it follows that every complexity that is expressed with big o notation is a complexity of the algorithm as well as of the corresponding problem on the other hand it is generally hard to obtain nontrivial lower bounds for problem complexity and there are few methods for obtaining such lower bounds for solving most problems it is required to read all input data which normally needs a time proportional to the size of the data thus such problems have a complexity that is at least linear that is using big omega notation a complexity x03a9 n displaystyle omega n the solution of some problems typically in computer algebra and computational algebraic geometry may be very large in such a case the complexity is lower bounded by the maximal size of the output since the output must be written for example a system of n polynomial equations of degree d in n indeterminates may have up to d n displaystyle d n complex solutions if the number of solutions is finite this is b zout s theorem as these solutions must be written down the complexity of this problem is x03a9 d n displaystyle omega d n for this problem an algorithm of complexity d o n displaystyle d o n is known which may thus be considered as asymptotically quasi optimal a nonlinear lower bound of x03a9 n log x2061 n displaystyle omega n log n is known for the number of comparisons needed for a sorting algorithm thus the best sorting algorithms are optimal as their complexity is o n log x2061 n displaystyle o n log n this lower bound results from the fact that there are n ways of ordering n objects as each comparison splits in two parts this set of n orders the number of n of comparisons that are needed for distinguishing all orders must verify 2 n gt n displaystyle 2 n gt n which implies n x03a9 n log x2061 n displaystyle n omega n log n by stirling s formula a standard method for getting lower bounds of complexity consists of reducing a problem to another problem more precisely suppose that one may encode a problem a of size n into a subproblem of size f n of a problem b and that the complexity of a is x03a9 g n displaystyle omega g n without loss of generality one may suppose that the function f increases with n and has an inverse function h then the complexity of the problem b is x03a9 g h n displaystyle omega g h n this is the method that is used to prove that if p np an unsolved conjecture the complexity of every np complete problem is x03a9 n k displaystyle omega n k for every positive integer k use in algorithm design edit evaluating the complexity of an algorithm is an important part of algorithm design as this gives useful information on the performance that may be expected it is a common misconception that the evaluation of the complexity of algorithms will become less important as a result of moore s law which posits the exponential growth of the power of modern computers this is wrong because this power increase allows working with large input data big data for example when one wants to sort alphabetically a list of a few hundreds of entries such as the bibliography of a book any algorithm should work well in less than a second on the other hand for a list of a million of entries the phone numbers of a large town for example the elementary algorithms that require o n 2 displaystyle o n 2 comparisons would have to do a trillion of comparisons which would need around three hours at the speed of 10 million of comparisons per second on the other hand the quicksort and merge sort require only n log 2 x2061 n displaystyle n log 2 n comparisons as average case complexity for the former as worst case complexity for the latter for n 1 000 000 this gives approximately 30 000 000 comparisons which would only take 3 seconds at 10 million comparisons per second thus the evaluation of the complexity may allow eliminating many inefficient algorithms before any implementation this may also be used for tuning complex algorithms without testing all variants by determining the most costly steps of a complex algorithm the study of complexity allows also focusing on these steps the effort for improving the efficiency of an implementation see also edit computational complexity of mathematical operations chinese postman problem complexity list references edit arora sanjeev barak boaz 2009 computational complexity a modern approach cambridge isbn 160 978 0 521 42426 4 zbl 160 1193 68112 du ding zhu ko ker i 2000 theory of computational complexity john wiley amp sons isbn 160 978 0 471 34506 0 garey michael r johnson david s 1979 computers and intractability a guide to the theory of np completeness w 160 h 160 freeman isbn 160 0 7167 1045 5 goldreich oded 2008 computational complexity a conceptual perspective cambridge university press van leeuwen jan ed 1990 handbook of theoretical computer science vol a algorithms and complexity mit press isbn 160 978 0 444 88071 0 papadimitriou christos 1994 computational complexity 1st 160 ed addison wesley isbn 160 0 201 53082 1 sipser michael 2006 introduction to the theory of computation 2nd 160 ed usa thomson course technology isbn 160 0 534 95097 3 retrieved from https en wikipedia org w index php title computational complexity amp oldid 1120112100 categories analysis of algorithmscomputational complexity theorycomputational resourceshidden categories articles with short descriptionshort description is different from wikidataarticles lacking in text citations from december 2017all articles lacking in text citationsarticles containing potentially dated statements from march 2018all articles containing potentially dated statementsarticles containing potentially dated statements from 2017 