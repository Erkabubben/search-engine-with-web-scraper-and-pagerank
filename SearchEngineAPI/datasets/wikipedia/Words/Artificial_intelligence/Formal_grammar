formal grammar from wikipedia the free encyclopedia jump to navigation jump to search structure of a formal language in formal language theory a grammar when the context is not given often called a formal grammar for clarity describes how to form strings from a language s alphabet that are valid according to the language s syntax a grammar does not describe the meaning of the strings or what can be done with them in whatever context only their form a formal grammar is defined as a set of production rules for such strings in a formal language formal language theory the discipline that studies formal grammars and languages is a branch of applied mathematics its applications are found in theoretical computer science theoretical linguistics formal semantics mathematical logic and other areas a formal grammar is a set of rules for rewriting strings along with a start symbol from which rewriting starts therefore a grammar is usually thought of as a language generator however it can also sometimes be used as the basis for a recognizer 8212 a function in computing that determines whether a given string belongs to the language or is grammatically incorrect to describe such recognizers formal language theory uses separate formalisms known as automata theory one of the interesting results of automata theory is that it is not possible to design a recognizer for certain formal languages 91 1 93 parsing is the process of recognizing an utterance a string in natural languages by breaking it down to a set of symbols and analyzing each one against the grammar of the language most languages have the meanings of their utterances structured according to their syntax 8212 a practice known as compositional semantics as a result the first step to describing the meaning of an utterance in language is to break it down part by part and look at its analyzed form known as its parse tree in computer science and as its deep structure in generative grammar contents 1 history 2 introductory example 2 1 example 1 2 2 examples 2 and 3 3 formal definition 3 1 the syntax of grammars 3 2 some mathematical constructs regarding formal grammars 3 3 example 4 the chomsky hierarchy 4 1 context free grammars 4 2 regular grammars 4 3 other forms of generative grammars 4 4 recursive grammars 5 analytic grammars 6 see also 7 references 8 external links history edit this section needs expansion you can help by adding to it february 2018 p ini s treatise astadyayi gives formal production rules and definitions to describe the formal grammar of sanskrit 91 2 93 there are different uses of form and formalism which have changed over time depending on the fields the relevant author was in contact with a historical overview of the concept is given in 91 3 93 introductory example edit a grammar mainly consists of a set of production rules rewriting rules for transforming strings each rule specifies a replacement of a particular string its left hand side with another its right hand side a rule can be applied to each string that contains its left hand side and produces a string in which an occurrence of that left hand side has been replaced with its right hand side unlike a semi thue system which is wholly defined by these rules a grammar further distinguishes between two kinds of symbols nonterminal and terminal symbols each left hand side must contain at least one nonterminal symbol it also distinguishes a special nonterminal symbol called the start symbol the language generated by the grammar is defined to be the set of all strings without any nonterminal symbols that can be generated from the string consisting of a single start symbol by possibly repeated application of its rules in whatever way possible if there are essentially different ways of generating the same single string the grammar is said to be ambiguous in the following examples the terminal symbols are a and b and the start symbol is s example 1 edit suppose we have the following production rules 1 s x2192 a s b displaystyle s rightarrow asb 2 s x2192 b a displaystyle s rightarrow ba then we start with s and can choose a rule to apply to it if we choose rule 1 we obtain the string asb if we then choose rule 1 again we replace s with asb and obtain the string aasbb if we now choose rule 2 we replace s with ba and obtain the string aababb and are done we can write this series of choices more briefly using symbols s x21d2 a s b x21d2 a a s b b x21d2 a a b a b b displaystyle s rightarrow asb rightarrow aasbb rightarrow aababb the language of the grammar is the infinite set a n b a b n x2223 n x2265 0 b a a b a b a a b a b b a a a b a b b b x2026 displaystyle a n bab n mid n geq 0 ba abab aababb aaababbb dotsc where a k displaystyle a k is a displaystyle a repeated k displaystyle k times and n displaystyle n in particular represents the number of times production rule 1 has been applied this grammar is context free only single nonterminals appear as left hand sides and unambiguous examples 2 and 3 edit suppose the rules are these instead 1 s x2192 a displaystyle s rightarrow a 2 s x2192 s s displaystyle s rightarrow ss 3 a s a x2192 b displaystyle asa rightarrow b this grammar is not context free due to rule 3 and it is ambiguous due to the multiple ways in which rule 2 can be used to generate sequences of s displaystyle s s however the language it generates is simply the set of all nonempty strings consisting of a displaystyle a s and or b displaystyle b s this is easy to see to generate a b displaystyle b from an s displaystyle s use rule 2 twice to generate s s s displaystyle sss then rule 1 twice and rule 3 once to produce b displaystyle b this means we can generate arbitrary nonempty sequences of s displaystyle s s and then replace each of them with a displaystyle a or b displaystyle b as we please that same language can alternatively be generated by a context free nonambiguous grammar for instance the regular grammar with rules 1 s x2192 a s displaystyle s rightarrow as 2 s x2192 b s displaystyle s rightarrow bs 3 s x2192 a displaystyle s rightarrow a 4 s x2192 b displaystyle s rightarrow b formal definition edit main article unrestricted grammar the syntax of grammars edit in the classic formalization of generative grammars first proposed by noam chomsky in the 1950s 91 4 93 91 5 93 a grammar g consists of the following components a finite set n of nonterminal symbols that is disjoint with the strings formed from g a finite set x03a3 displaystyle sigma of terminal symbols that is disjoint from n a finite set p of production rules each rule of the form x03a3 x222a n x2217 n x03a3 x222a n x2217 x2192 x03a3 x222a n x2217 displaystyle sigma cup n n sigma cup n rightarrow sigma cup n where x2217 displaystyle is the kleene star operator and x222a displaystyle cup denotes set union that is each production rule maps from one string of symbols to another where the first string the head contains an arbitrary number of symbols provided at least one of them is a nonterminal in the case that the second string the body consists solely of the empty string 8212 i e that it contains no symbols at all 8212 it may be denoted with a special notation often x039b displaystyle lambda e or x03f5 displaystyle epsilon in order to avoid confusion a distinguished symbol s x2208 n displaystyle s in n that is the start symbol also called the sentence symbol a grammar is formally defined as the tuple n x03a3 p s displaystyle n sigma p s such a formal grammar is often called a rewriting system or a phrase structure grammar in the literature 91 6 93 91 7 93 some mathematical constructs regarding formal grammars edit the operation of a grammar can be defined in terms of relations on strings given a grammar g n x03a3 p s displaystyle g n sigma p s the binary relation x21d2 g displaystyle underset g rightarrow pronounced as g derives in one step on strings in x03a3 x222a n x2217 displaystyle sigma cup n is defined by x x21d2 g y x27fa x2203 u v p q x2208 x03a3 x222a n x2217 x u p v x2227 p x2192 q x2208 p x2227 y u q v displaystyle x underset g rightarrow y iff exists u v p q in sigma cup n x upv wedge p rightarrow q in p wedge y uqv the relation x21d2 g x2217 displaystyle overset underset g rightarrow pronounced as g derives in zero or more steps is defined as the reflexive transitive closure of x21d2 g displaystyle underset g rightarrow a sentential form is a member of x03a3 x222a n x2217 displaystyle sigma cup n that can be derived in a finite number of steps from the start symbol s displaystyle s that is a sentential form is a member of w x2208 x03a3 x222a n x2217 x2223 s x21d2 g x2217 w displaystyle left w in sigma cup n mid s overset underset g rightarrow w right a sentential form that contains no nonterminal symbols i e is a member of x03a3 x2217 displaystyle sigma is called a sentence 91 8 93 the language of g displaystyle g denoted as l g displaystyle boldsymbol l g is defined as the set of sentences built by g displaystyle g note that the grammar g n x03a3 p s displaystyle g n sigma p s is effectively the semi thue system n x222a x03a3 p displaystyle n cup sigma p rewriting strings in exactly the same way the only difference is in that we distinguish specific nonterminal symbols which must be rewritten in rewrite rules and are only interested in rewritings from the designated start symbol s displaystyle s to strings without nonterminal symbols example edit for these examples formal languages are specified using set builder notation consider the grammar g displaystyle g where n s b displaystyle n left s b right x03a3 a b c displaystyle sigma left a b c right s displaystyle s is the start symbol and p displaystyle p consists of the following production rules 1 s x2192 a b s c displaystyle s rightarrow absc 2 s x2192 a b c displaystyle s rightarrow abc 3 b a x2192 a b displaystyle ba rightarrow ab 4 b b x2192 b b displaystyle bb rightarrow bb this grammar defines the language l g a n b n c n x2223 n x2265 1 displaystyle l g left a n b n c n mid n geq 1 right where a n displaystyle a n denotes a string of n consecutive a displaystyle a s thus the language is the set of strings that consist of 1 or more a displaystyle a s followed by the same number of b displaystyle b s followed by the same number of c displaystyle c s some examples of the derivation of strings in l g displaystyle l g are s x21d2 2 a b c displaystyle boldsymbol s underset 2 rightarrow boldsymbol abc s x21d2 1 a b s c x21d2 2 a b a b c c x21d2 3 a a b b c c x21d2 4 a a b b c c displaystyle begin aligned boldsymbol s amp underset 1 rightarrow boldsymbol absc amp underset 2 rightarrow ab boldsymbol abc c amp underset 3 rightarrow a boldsymbol ab bcc amp underset 4 rightarrow aa boldsymbol bb cc end aligned s x21d2 1 a b s c x21d2 1 a b a b s c c x21d2 2 a b a b a b c c c x21d2 3 a a b b a b c c c x21d2 3 a a b a b b c c c x21d2 3 a a a b b b c c c x21d2 4 a a a b b b c c c x21d2 4 a a a b b b c c c displaystyle begin aligned boldsymbol s amp underset 1 rightarrow boldsymbol absc underset 1 rightarrow ab boldsymbol absc c amp underset 2 rightarrow abab boldsymbol abc cc amp underset 3 rightarrow a boldsymbol ab babccc underset 3 rightarrow aab boldsymbol ab bccc underset 3 rightarrow aa boldsymbol ab bbccc amp underset 4 rightarrow aaab boldsymbol bb ccc underset 4 rightarrow aaa boldsymbol bb bccc end aligned note on notation p x21d2 i q displaystyle p underset i rightarrow q reads string p generates string q by means of production i and the generated part is each time indicated in bold type the chomsky hierarchy edit main article chomsky hierarchy when noam chomsky first formalized generative grammars in 1956 91 4 93 he classified them into types now known as the chomsky hierarchy the difference between these types is that they have increasingly strict production rules and can therefore express fewer formal languages two important types are context free grammars type 2 and regular grammars type 3 the languages that can be described with such a grammar are called context free languages and regular languages respectively although much less powerful than unrestricted grammars type 0 which can in fact express any language that can be accepted by a turing machine these two restricted types of grammars are most often used because parsers for them can be efficiently implemented 91 9 93 for example all regular languages can be recognized by a finite state machine and for useful subsets of context free grammars there are well known algorithms to generate efficient ll parsers and lr parsers to recognize the corresponding languages those grammars generate context free grammars edit a context free grammar is a grammar in which the left hand side of each production rule consists of only a single nonterminal symbol this restriction is non trivial not all languages can be generated by context free grammars those that can are called context free languages the language l g a n b n c n x2223 n x2265 1 displaystyle l g left a n b n c n mid n geq 1 right defined above is not a context free language and this can be strictly proven using the pumping lemma for context free languages but for example the language a n b n x2223 n x2265 1 displaystyle left a n b n mid n geq 1 right at least 1 a displaystyle a followed by the same number of b displaystyle b s is context free as it can be defined by the grammar g 2 displaystyle g 2 with n s displaystyle n left s right x03a3 a b displaystyle sigma left a b right s displaystyle s the start symbol and the following production rules 1 s x2192 a s b displaystyle s rightarrow asb 2 s x2192 a b displaystyle s rightarrow ab a context free language can be recognized in o n 3 displaystyle o n 3 time see big o notation by an algorithm such as earley s recogniser that is for every context free language a machine can be built that takes a string as input and determines in o n 3 displaystyle o n 3 time whether the string is a member of the language where n displaystyle n is the length of the string 91 10 93 deterministic context free languages is a subset of context free languages that can be recognized in linear time 91 11 93 there exist various algorithms that target either this set of languages or some subset of it regular grammars edit in regular grammars the left hand side is again only a single nonterminal symbol but now the right hand side is also restricted the right side may be the empty string or a single terminal symbol or a single terminal symbol followed by a nonterminal symbol but nothing else sometimes a broader definition is used one can allow longer strings of terminals or single nonterminals without anything else making languages easier to denote while still defining the same class of languages the language a n b n x2223 n x2265 1 displaystyle left a n b n mid n geq 1 right defined above is not regular but the language a n b m x2223 m n x2265 1 displaystyle left a n b m mid m n geq 1 right at least 1 a displaystyle a followed by at least 1 b displaystyle b where the numbers may be different is as it can be defined by the grammar g 3 displaystyle g 3 with n s a b displaystyle n left s a b right x03a3 a b displaystyle sigma left a b right s displaystyle s the start symbol and the following production rules s x2192 a a displaystyle s rightarrow aa a x2192 a a displaystyle a rightarrow aa a x2192 b b displaystyle a rightarrow bb b x2192 b b displaystyle b rightarrow bb b x2192 x03f5 displaystyle b rightarrow epsilon all languages generated by a regular grammar can be recognized in o n displaystyle o n time by a finite state machine although in practice regular grammars are commonly expressed using regular expressions some forms of regular expression used in practice do not strictly generate the regular languages and do not show linear recognitional performance due to those deviations other forms of generative grammars edit many extensions and variations on chomsky s original hierarchy of formal grammars have been developed both by linguists and by computer scientists usually either in order to increase their expressive power or in order to make them easier to analyze or parse some forms of grammars developed include tree adjoining grammars increase the expressiveness of conventional generative grammars by allowing rewrite rules to operate on parse trees instead of just strings 91 12 93 affix grammars 91 13 93 and attribute grammars 91 14 93 91 15 93 allow rewrite rules to be augmented with semantic attributes and operations useful both for increasing grammar expressiveness and for constructing practical language translation tools recursive grammars edit not to be confused with recursive language a recursive grammar is a grammar that contains production rules that are recursive for example a grammar for a context free language is left recursive if there exists a non terminal symbol a that can be put through the production rules to produce a string with a as the leftmost symbol 91 16 93 an example of recursive grammar is a clause within a sentence separated by two commas 91 17 93 all types of grammars in the okoye hierarchy can be recursive 91 citation needed 93 analytic grammars edit though there is a tremendous body of literature on parsing algorithms most of these algorithms assume that the language to be parsed is initially described by means of a generative formal grammar and that the goal is to transform this generative grammar into a working parser strictly speaking a generative grammar does not in any way correspond to the algorithm used to parse a language and various algorithms have different restrictions on the form of production rules that are considered well formed an alternative approach is to formalize the language in terms of an analytic grammar in the first place which more directly corresponds to the structure and semantics of a parser for the language examples of analytic grammar formalisms include the following the language machine directly implements unrestricted analytic grammars substitution rules are used to transform an input to produce outputs and behaviour the system can also produce the lm diagram which shows what happens when the rules of an unrestricted analytic grammar are being applied top down parsing language tdpl a highly minimalist analytic grammar formalism developed in the early 1970s to study the behavior of top down parsers 91 18 93 link grammars a form of analytic grammar designed for linguistics which derives syntactic structure by examining the positional relationships between pairs of words 91 19 93 91 20 93 parsing expression grammars pegs a more recent generalization of tdpl designed around the practical expressiveness needs of programming language and compiler writers 91 21 93 see also edit abstract syntax tree adaptive grammar ambiguous grammar backus naur form bnf categorial grammar concrete syntax tree extended backus naur form ebnf grammar framework l system lojban post canonical system shape grammar well formed formula references edit meduna alexander 2014 formal languages and computation models and their applications crc press p 160 233 isbn 160 9781466513457 for more on this subject see undecidable problem panini biography www history mcs st andrews ac uk archived from the original on 2018 08 15 mcelvenny j 2019 mcelvenny j ed form and formalism in linguistics pdf berlin language science press doi 10 5281 zenodo 2654375 isbn 160 978 3 96110 182 5 a b chomsky noam sep 1956 three models for the description of language ire transactions on information theory 2 3 113 124 doi 10 1109 tit 1956 1056813 chomsky noam 1957 syntactic structures the hague mouton ginsburg seymour 1975 algebraic and automata theoretic properties of formal languages north holland pp 160 8 9 isbn 160 978 0 7204 2506 2 harrison michael a 1978 introduction to formal language theory reading mass addison wesley publishing company p 160 13 isbn 160 978 0 201 02955 0 sentential forms context free grammars david matuszek grune dick amp jacobs ceriel h parsing techniques 8211 a practical guide ellis horwood england 1990 earley jay an efficient context free parsing algorithm communications of the acm vol 13 no 2 pp 94 102 february 1970 knuth d e july 1965 on the translation of languages from left to right information and control 8 6 607 639 doi 10 1016 s0019 9958 65 90426 2 joshi aravind k et al tree adjunct grammars journal of computer systems science vol 10 no 1 pp 136 163 1975 koster cornelis h a affix grammars in algol 68 implementation north holland publishing company amsterdam p 95 109 1971 knuth donald e semantics of context free languages mathematical systems theory vol 2 no 2 pp 127 145 1968 knuth donald e semantics of context free languages correction mathematical systems theory vol 5 no 1 pp 95 96 1971 notes on formal language theory and parsing archived 2017 08 28 at the wayback machine james power department of computer science national university of ireland maynooth maynooth co kildare ireland jpr02 borenstein seth april 27 2006 songbirds grasp grammar too northwest herald p 160 2 8211 via newspapers com birman alexander the tmg recognition schema doctoral thesis princeton university dept of electrical engineering february 1970 sleator daniel d amp temperly davy parsing english with a link grammar technical report cmu cs 91 196 carnegie mellon university computer science 1991 sleator daniel d amp temperly davy parsing english with a link grammar third international workshop on parsing technologies 1993 revised version of above report ford bryan packrat parsing a practical linear time algorithm with backtracking master s thesis massachusetts institute of technology sept 2002 external links edit vteautomata theory formal languages and formal grammarschomsky hierarchygrammarslanguagesabstract machines type 0 type 1 type 2 type 3 unrestricted no common name context sensitive positive range concatenation indexed linear context free rewriting systems tree adjoining context free deterministic context free visibly pushdown regular non recursive recursively enumerable decidable context sensitive positive range concatenation indexed linear context free rewriting language tree adjoining context free deterministic context free visibly pushdown regular star free finite turing machine decider linear bounded ptime turing machine nested stack thread automaton restricted tree stack automaton embedded pushdown nondeterministic pushdown deterministic pushdown visibly pushdown finite counter free with aperiodic finite monoid acyclic finite each category of languages except those marked by a is a proper subset of the category directly above it any language in each category is generated by a grammar and by an automaton in the category in the same line vtemathematical logicgeneral axiom list cardinality first order logic formal proof formal semantics foundations of mathematics information theory logical consequence model set theorem theory type theory theorems 160 list 160 amp 160 paradoxes g del s completeness 160 and 160 incompleteness theorems tarski s undefinability banach tarski paradox cantor s 160 theorem 160 paradox 160 and 160 diagonal argument compactness halting problem lindstr m s l wenheim skolem russell s paradox logicstraditional classical logic logical truth tautology proposition inference logical equivalence consistency equiconsistency argument soundness validity syllogism square of opposition venn diagram propositional boolean algebra boolean functions logical connectives propositional calculus propositional formula truth tables many valued logic 3 finite predicate first order list second order monadic higher order free quantifiers predicate monadic predicate calculus set theory set hereditary class ur element ordered pair ordinal number subset equality extensionality forcing relation equivalence partition set operations intersection union complement cartesian product power set identities types of sets countable uncountable empty inhabited singleton finite infinite transitive ultrafilter recursive fuzzy universal universe constructible grothendieck von neumann maps 160 amp 160 cardinality function map domain codomain image in sur bi jection schr der bernstein theorem isomorphism g del numbering enumeration large cardinal inaccessible aleph number operation binary set theories zermelo fraenkel axiom of choice continuum hypothesis general kripke platek morse kelley naive new foundations tarski grothendieck von neumann bernays g del constructive formal systems 160 list language 160 amp 160 syntax alphabet arity automata axiom schema expression ground extension by definition conservative relation formation rule grammar formula atomic closed ground open free bound variable language metalanguage logical connective predicate functional variable propositional variable proof quantifier rank sentence atomic spectrum signature string substitution symbol function logical constant non logical variable term theory list example 160 axiomaticsystems 160 list of arithmetic peano second order elementary function primitive recursive robinson skolem of the real numbers tarski s axiomatization of boolean algebras canonical minimal axioms of geometry euclidean elements hilbert s non euclidean tarski s principia mathematica proof theory formal proof natural deduction logical consequence rule of inference sequent calculus theorem systems axiomatic deductive hilbert list complete theory independence 160 from 160 zfc proof of impossibility ordinal analysis reverse mathematics self verifying theories model theory interpretation model equivalence finite saturated spectrum substructure non standard model of arithmetic diagram elementary categorical theory model complete theory satisfiability semantics of logic strength theories of truth semantic tarski s kripke s t schema transfer principle truth predicate truth value type ultraproduct validity computability theory church encoding church turing thesis computably enumerable computable function computable set decision problem decidable undecidable p np p versus np problem kolmogorov complexity lambda calculus primitive recursive function recursion recursive set turing machine type theory related abstract logic category theory concrete abstract category category of sets history of logic history of mathematical logic timeline logicism mathematical object philosophy of mathematics supertask 160 mathematics 32 portal authority control national libraries germany retrieved from https en wikipedia org w index php title formal grammar amp oldid 1123743166 categories formal languagesgrammarmathematical logicsyntaxautomata computation hidden categories webarchive template wayback linksarticles with short descriptionshort description matches wikidataarticles to be expanded from february 2018all articles to be expandedarticles using small message boxesall articles with unsourced statementsarticles with unsourced statements from november 2019articles with gnd identifiers 