theory of computation from wikipedia the free encyclopedia jump to navigation jump to search academic subfield of computer science not to be confused with computational theory of mind for the journal see theory of computing an artistic representation of a turing machine turing machines are frequently used as theoretical models for computing in theoretical computer science and mathematics the theory of computation is the branch that deals with what problems can be solved on a model of computation using an algorithm how efficiently they can be solved or to what degree e g approximate solutions versus precise ones the field is divided into three major branches automata theory and formal languages computability theory and computational complexity theory which are linked by the question what are the fundamental capabilities and limitations of computers 91 1 93 in order to perform a rigorous study of computation computer scientists work with a mathematical abstraction of computers called a model of computation there are several models in use but the most commonly examined is the turing machine 91 2 93 computer scientists study the turing machine because it is simple to formulate can be analyzed and used to prove results and because it represents what many consider the most powerful possible reasonable model of computation see church turing thesis 91 3 93 it might seem that the potentially infinite memory capacity is an unrealizable attribute but any decidable problem 91 4 93 solved by a turing machine will always require only a finite amount of memory so in principle any problem that can be solved decided by a turing machine can be solved by a computer that has a finite amount of memory contents 1 history 2 branches 2 1 automata theory 2 1 1 formal language theory 2 2 computability theory 2 3 computational complexity theory 3 models of computation 4 references 5 further reading 6 external links history edit the theory of computation can be considered the creation of models of all kinds in the field of computer science therefore mathematics and logic are used in the last century it became an independent academic discipline and was separated from mathematics some pioneers of the theory of computation were ramon llull alonzo church kurt g del alan turing stephen kleene r zsa p ter john von neumann and claude shannon branches edit automata theory edit main article automata theory grammar languages automaton production rules constraints type 0 recursively enumerable turing machine x03b1 x2192 x03b2 displaystyle alpha rightarrow beta no restrictions type 1 context sensitive linear bounded non deterministic turing machine x03b1 a x03b2 x2192 x03b1 x03b3 x03b2 displaystyle alpha a beta rightarrow alpha gamma beta type 2 context free non deterministic pushdown automaton a x2192 x03b3 displaystyle a rightarrow gamma type 3 regular finite state automaton a x2192 a displaystyle a rightarrow a and a x2192 a b displaystyle a rightarrow ab automata theory is the study of abstract machines or more appropriately abstract mathematical machines or systems and the computational problems that can be solved using these machines these abstract machines are called automata automata comes from the greek word which means that something is doing something by itself automata theory is also closely related to formal language theory 91 5 93 as the automata are often classified by the class of formal languages they are able to recognize an automaton can be a finite representation of a formal language that may be an infinite set automata are used as theoretical models for computing machines and are used for proofs about computability formal language theory edit main article formal language set inclusions described by the chomsky hierarchy language theory is a branch of mathematics concerned with describing languages as a set of operations over an alphabet it is closely linked with automata theory as automata are used to generate and recognize formal languages there are several classes of formal languages each allowing more complex language specification than the one before it i e chomsky hierarchy 91 6 93 and each corresponding to a class of automata which recognizes it because automata are used as models for computation formal languages are the preferred mode of specification for any problem that must be computed computability theory edit main article computability theory computability theory deals primarily with the question of the extent to which a problem is solvable on a computer the statement that the halting problem cannot be solved by a turing machine 91 7 93 is one of the most important results in computability theory as it is an example of a concrete problem that is both easy to formulate and impossible to solve using a turing machine much of computability theory builds on the halting problem result another important step in computability theory was rice s theorem which states that for all non trivial properties of partial functions it is undecidable whether a turing machine computes a partial function with that property 91 8 93 computability theory is closely related to the branch of mathematical logic called recursion theory which removes the restriction of studying only models of computation which are reducible to the turing model 91 9 93 many mathematicians and computational theorists who study recursion theory will refer to it as computability theory computational complexity theory edit main article computational complexity theory a representation of the relation among complexity classes complexity theory considers not only whether a problem can be solved at all on a computer but also how efficiently the problem can be solved two major aspects are considered time complexity and space complexity which are respectively how many steps does it take to perform a computation and how much memory is required to perform that computation in order to analyze how much time and space a given algorithm requires computer scientists express the time or space required to solve the problem as a function of the size of the input problem for example finding a particular number in a long list of numbers becomes harder as the list of numbers grows larger if we say there are n numbers in the list then if the list is not sorted or indexed in any way we may have to look at every number in order to find the number we re seeking we thus say that in order to solve this problem the computer needs to perform a number of steps that grows linearly in the size of the problem to simplify this problem computer scientists have adopted big o notation which allows functions to be compared in a way that ensures that particular aspects of a machine s construction do not need to be considered but rather only the asymptotic behavior as problems become large so in our previous example we might say that the problem requires o n displaystyle o n steps to solve perhaps the most important open problem in all of computer science is the question of whether a certain broad class of problems denoted np can be solved efficiently this is discussed further at complexity classes p and np and p versus np problem is one of the seven millennium prize problems stated by the clay mathematics institute in 2000 the official problem description was given by turing award winner stephen cook models of computation edit main article model of computation aside from a turing machine other equivalent see church turing thesis models of computation are in use lambda calculus a computation consists of an initial lambda expression or two if you want to separate the function and its input plus a finite sequence of lambda terms each deduced from the preceding term by one application of beta reduction combinatory logic is a concept which has many similarities to x03bb displaystyle lambda calculus but also important differences exist e g fixed point combinator y has normal form in combinatory logic but not in x03bb displaystyle lambda calculus combinatory logic was developed with great ambitions understanding the nature of paradoxes making foundations of mathematics more economic conceptually eliminating the notion of variables thus clarifying their role in mathematics recursive functions a computation consists of a mu recursive function i e its defining sequence any input value s and a sequence of recursive functions appearing in the defining sequence with inputs and outputs thus if in the defining sequence of a recursive function f x displaystyle f x the functions g x displaystyle g x and h x y displaystyle h x y appear then terms of the form g 5 7 or h 3 2 10 might appear each entry in this sequence needs to be an application of a basic function or follow from the entries above by using composition primitive recursion or recursion for instance if f x h x g x displaystyle f x h x g x then for f 5 3 to appear terms like g 5 6 and h 5 6 3 must occur above the computation terminates only if the final term gives the value of the recursive function applied to the inputs markov algorithm a string rewriting system that uses grammar like rules to operate on strings of symbols register machine is a theoretically interesting idealization of a computer there are several variants in most of them each register can hold a natural number of unlimited size and the instructions are simple and few in number e g only decrementation combined with conditional jump and incrementation exist and halting the lack of the infinite or dynamically growing external store seen at turing machines can be understood by replacing its role with g del numbering techniques the fact that each register holds a natural number allows the possibility of representing a complicated thing e g a sequence or a matrix etc by an appropriate huge natural number unambiguity of both representation and interpretation can be established by number theoretical foundations of these techniques in addition to the general computational models some simpler computational models are useful for special restricted applications regular expressions for example specify string patterns in many contexts from office productivity software to programming languages another formalism mathematically equivalent to regular expressions finite automata are used in circuit design and in some kinds of problem solving context free grammars specify programming language syntax non deterministic pushdown automata are another formalism equivalent to context free grammars primitive recursive functions are a defined subclass of the recursive functions different models of computation have the ability to do different tasks one way to measure the power of a computational model is to study the class of formal languages that the model can generate in such a way to the chomsky hierarchy of languages is obtained references edit michael sipser 2013 introduction to the theory of computation 3rd cengage learning isbn 160 978 1 133 18779 0 central areas of the theory of computation automata computability and complexity page 1 hodges andrew 2012 alan turing the enigma the centenary 160 ed princeton university press isbn 160 978 0 691 15564 7 rabin michael o june 2012 turing church g del computability complexity and randomization a personal view donald monk 1976 mathematical logic springer verlag isbn 160 9780387901701 hopcroft john e and jeffrey d ullman 2006 introduction to automata theory languages and computation 3rd ed reading ma addison wesley isbn 160 978 0 321 45536 9 chomsky hierarchy 1956 three models for the description of language information theory ire transactions on ieee 2 3 113 124 doi 10 1109 tit 1956 1056813 alan turing 1937 on computable numbers with an application to the entscheidungsproblem proceedings of the london mathematical society ieee 2 42 230 265 doi 10 1112 plms s2 42 1 230 s2cid 160 73712 retrieved 6 january 2015 henry gordon rice 1953 classes of recursively enumerable sets and their decision problems transactions of the american mathematical society american mathematical society 74 2 358 366 doi 10 2307 1990888 jstor 160 1990888 martin davis 2004 the undecidable basic papers on undecidable propositions unsolvable problems and computable functions dover ed dover publications isbn 160 978 0486432281 further reading edit textbooks aimed at computer scientists there are many textbooks in this area this list is by necessity incomplete hopcroft john e and jeffrey d ullman 2006 introduction to automata theory languages and computation 3rd ed reading ma addison wesley isbn 160 978 0 321 45536 9 one of the standard references in the field linz p 2007 an introduction to formal language and automata narosa publishing isbn 160 9788173197819 michael sipser 2013 introduction to the theory of computation 3rd 160 ed cengage learning isbn 160 978 1 133 18779 0 eitan gurari 1989 an introduction to the theory of computation computer science press isbn 160 0 7167 8182 4 archived from the original on 2007 01 07 hein james l 1996 theory of computation sudbury ma jones amp bartlett isbn 160 978 0 86720 497 1 a gentle introduction to the field appropriate for second year undergraduate computer science students taylor r gregory 1998 models of computation and formal languages new york oxford university press isbn 160 978 0 19 510983 2 an unusually readable textbook appropriate for upper level undergraduates or beginning graduate students lewis f d 2007 essentials of theoretical computer science a textbook covering the topics of formal languages automata and grammars the emphasis appears to be on presenting an overview of the results and their applications rather than providing proofs of the results martin davis ron sigal elaine j weyuker computability complexity and languages fundamentals of theoretical computer science 2nd ed academic press 1994 isbn 160 0 12 206382 1 covers a wider range of topics than most other introductory books including program semantics and quantification theory aimed at graduate students books on computability theory from the wider mathematical perspective hartley rogers jr 1987 theory of recursive functions and effective computability mit press isbn 160 0 262 68052 1 s barry cooper 2004 computability theory chapman and hall crc isbn 160 1 58488 237 9 carl h smith a recursive introduction to the theory of computation springer 1994 isbn 160 0 387 94332 3 a shorter textbook suitable for graduate students in computer science historical perspective richard l epstein and walter a carnielli 2000 computability computable functions logic and the foundations of mathematics with computability a timeline 2nd ed wadsworth thomson learning isbn 160 0 534 54644 7 external links edit theory of computation at mit theory of computation at harvard computability logic a theory of interactive computation the main web source on this subject vtemathematics history timeline outline lists glossary foundations category theory information theory mathematical logic philosophy of mathematics set theory type theory algebra abstract commutative elementary group theory linear multilinear universal homological analysis calculus real analysis complex analysis hypercomplex analysis differential equations functional analysis harmonic analysis measure theory discrete combinatorics graph theory order theory geometry algebraic analytic arithmetic differential discrete euclidean finite number theory arithmetic algebraic number theory analytic number theory diophantine geometry topology general algebraic differential geometric homotopy theory applied engineering mathematics mathematical biology mathematical chemistry mathematical economics mathematical finance mathematical physics mathematical psychology mathematical sociology mathematical statistics probability statistics systems science control theory game theory operations research computational computer science theory of computation computational complexity theory numerical analysis optimization computer algebra related topics informal mathematics recreational mathematics mathematics and art mathematics education 160 mathematics 32 portal category commons wikiproject vtecomputer sciencenote this template roughly follows the 2012 acm computing classification system hardware printed circuit board peripheral integrated circuit very large scale integration systems on chip socs energy consumption green computing electronic design automation hardware acceleration computer systems organization computer architecture embedded system real time computing dependability networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notations and tools programming paradigm programming language compiler domain specific language modeling language software framework integrated development environment software configuration management software library software repository software development control variable software development process requirements analysis software design software construction software deployment software engineering software maintenance programming team open source model theory of computation model of computation formal language automata theory computability theory computational complexity theory logic semantics algorithms algorithm design analysis of algorithms algorithmic efficiency randomized algorithm computational geometry mathematics of computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis theoretical computer science information systems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security services intrusion detection system hardware security network security information security application security human computer interaction interaction design social computing ubiquitous computing visualization accessibility synthography concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificial intelligence natural language processing knowledge representation and reasoning computer vision automated planning and scheduling search methodology control method philosophy of artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multi task learning cross validation graphics animation rendering image manipulation graphics processing unit mixed reality virtual reality image compression solid modeling applied computing e commerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering computational healthcare digital art electronic publishing cyberwarfare electronic voting video games word processing operations research educational technology document management category outline wikiproject commons retrieved from https en wikipedia org w index php title theory of computation amp oldid 1108170363 categories theory of computationhidden categories articles with short descriptionshort description is different from wikidata 