lisp machine from wikipedia the free encyclopedia redirected from lisp machine jump to navigation jump to search computer specialized in running lisp this article is about the type of computer for the company see lisp machines a knight machine preserved in the mit museum lisp machines are general purpose computers designed to efficiently run lisp as their main software and programming language usually via hardware support they are an example of a high level language computer architecture and in a sense they were the first commercial single user workstations despite being modest in number perhaps 7 000 units total as of 1988 91 1 93 lisp machines commercially pioneered many now commonplace technologies including effective garbage collection laser printing windowing systems computer mice high resolution bit mapped raster graphics computer graphic rendering and networking innovations such as chaosnet 91 2 93 several firms built and sold lisp machines in the 1980s symbolics 3600 3640 xl1200 macivory and other models lisp machines incorporated lmi lambda texas instruments explorer microexplorer and xerox interlisp d workstations the operating systems were written in lisp machine lisp interlisp xerox and later partly in common lisp symbolics 3640 lisp machine contents 1 history 1 1 historical context 1 2 initial development 1 3 commercializing mit lisp machine technology 1 4 interlisp bbn and xerox 1 5 integrated inference machines 1 6 developments of lisp machines outside the united states 1 7 end of the lisp machines 1 8 legacy 1 9 applications 2 technical overview 3 see also 4 references 5 external links history edit historical context edit artificial intelligence ai computer programs of the 1960s and 1970s intrinsically required what was then considered a huge amount of computer power as measured in processor time and memory space the power requirements of ai research were exacerbated by the lisp symbolic programming language when commercial hardware was designed and optimized for assembly and fortran like programming languages at first the cost of such computer hardware meant that it had to be shared among many users as integrated circuit technology shrank the size and cost of computers in the 1960s and early 1970s and the memory needs of ai programs began to exceed the address space of the most common research computer the digital equipment corporation dec pdp 10 researchers considered a new approach a computer designed specifically to develop and run large artificial intelligence programs and tailored to the semantics of the lisp language to keep the operating system relatively simple these machines would not be shared but would be dedicated to single users 91 citation needed 93 initial development edit in 1973 richard greenblatt and thomas knight programmers at massachusetts institute of technology mit artificial intelligence laboratory ai lab began what would become the mit lisp machine project when they first began building a computer hardwired to run certain basic lisp operations rather than run them in software in a 24 bit tagged architecture the machine also did incremental or arena garbage collection 91 citation needed 93 more specifically since lisp variables are typed at runtime rather than compile time a simple addition of two variables could take five times as long on conventional hardware due to test and branch instructions lisp machines ran the tests in parallel with the more conventional single instruction additions if the simultaneous tests failed then the result was discarded and recomputed this meant in many cases a speed increase by several factors this simultaneous checking approach was used as well in testing the bounds of arrays when referenced and other memory management necessities not merely garbage collection or arrays type checking was further improved and automated when the conventional byte word of 32 bits was lengthened to 36 bits for symbolics 3600 model lisp machines 91 3 93 and eventually to 40 bits or more usually the excess bits not accounted for by the following were used for error correcting codes the first group of extra bits were used to hold type data making the machine a tagged architecture and the remaining bits were used to implement cdr coding wherein the usual linked list elements are compressed to occupy roughly half the space aiding garbage collection by reportedly an order of magnitude a further improvement was two microcode instructions which specifically supported lisp functions reducing the cost of calling a function to as little as 20 clock cycles in some symbolics implementations the first machine was called the cons machine named after the list construction operator cons in lisp often it was affectionately referred to as the knight machine perhaps since knight wrote his master s thesis on the subject it was extremely well received 91 citation needed 93 it was subsequently improved into a version called cadr a pun in lisp the cadr function which returns the second item of a list is pronounced ke d or k d as some pronounce the word cadre which was based on essentially the same architecture about 25 of what were essentially prototype cadrs were sold within and without mit for 50 000 it quickly became the favorite machine for hacking many of the most favored software tools were quickly ported to it e g emacs was ported from its in 1975 91 disputed 32 8211 discuss 93 it was so well received at an ai conference held at mit in 1978 that defense advanced research projects agency darpa began funding its development commercializing mit lisp machine technology edit this section possibly contains original research please improve it by verifying the claims made and adding inline citations statements consisting only of original research should be removed june 2021 learn how and when to remove this template message symbolics 3620 left and lmi lambda lisp machines in 1979 russell noftsker being convinced that lisp machines had a bright commercial future due to the strength of the lisp language and the enabling factor of hardware acceleration proposed to greenblatt that they commercialize the technology 91 citation needed 93 in a counter intuitive move for an ai lab hacker greenblatt acquiesced hoping perhaps that he could recreate the informal and productive atmosphere of the lab in a real business these ideas and goals were considerably different from those of noftsker the two negotiated at length but neither would compromise as the proposed firm could succeed only with the full and undivided assistance of the ai lab hackers as a group noftsker and greenblatt decided that the fate of the enterprise was up to them and so the choice should be left to the hackers the ensuing discussions of the choice divided the lab into two factions in february 1979 matters came to a head the hackers sided with noftsker believing that a commercial venture fund backed firm had a better chance of surviving and commercializing lisp machines than greenblatt s proposed self sustaining start up greenblatt lost the battle it was at this juncture that symbolics noftsker s enterprise slowly came together while noftsker was paying his staff a salary he had no building or any equipment for the hackers to work on he bargained with patrick winston that in exchange for allowing symbolics staff to keep working out of mit symbolics would let mit use internally and freely all the software symbolics developed a consultant from cdc who was trying to put together a natural language computer application with a group of west coast programmers came to greenblatt seeking a lisp machine for his group to work with about eight months after the disastrous conference with noftsker greenblatt had decided to start his own rival lisp machine firm but he had done nothing the consultant alexander jacobson decided that the only way greenblatt was going to start the firm and build the lisp machines that jacobson desperately needed was if jacobson pushed and otherwise helped greenblatt launch the firm jacobson pulled together business plans a board a partner for greenblatt one f stephen wyle the newfound firm was named lisp machine inc lmi and was funded by cdc orders via jacobson around this time symbolics noftsker s firm began operating it had been hindered by noftsker s promise to give greenblatt a year s head start and by severe delays in procuring venture capital symbolics still had the major advantage that while 3 or 4 of the ai lab hackers had gone to work for greenblatt a solid 14 other hackers had signed onto symbolics two ai lab people were not hired by either richard stallman and marvin minsky stallman however blamed symbolics for the decline of the hacker community that had centered around the ai lab for two years from 1982 to the end of 1983 stallman worked by himself to clone the output of the symbolics programmers with the aim of preventing them from gaining a monopoly on the lab s computers 91 4 93 regardless after a series of internal battles symbolics did get off the ground in 1980 1981 selling the cadr as the lm 2 while lisp machines inc sold it as the lmi cadr symbolics did not intend to produce many lm 2s since the 3600 family of lisp machines was supposed to ship quickly but the 3600s were repeatedly delayed and symbolics ended up producing 100 lm 2s each of which sold for 70 000 both firms developed second generation products based on the cadr the symbolics 3600 and the lmi lambda of which lmi managed to sell 200 the 3600 which shipped a year late expanded on the cadr by widening the machine word to 36 bits expanding the address space to 28 bits 91 5 93 and adding hardware to accelerate certain common functions that were implemented in microcode on the cadr the lmi lambda which came out a year after the 3600 in 1983 was compatible with the cadr it could run cadr microcode but hardware differences existed texas instruments ti joined the fray when it licensed the lmi lambda design and produced its own variant the ti explorer some of the lmi lambdas and the ti explorer were dual systems with both a lisp and a unix processor ti also developed a 32 bit microprocessor version of its lisp cpu for the ti explorer this lisp chip also was used for the microexplorer a nubus board for the apple macintosh ii nubus was initially developed at mit for use in lisp machines symbolics continued to develop the 3600 family and its operating system genera and produced the ivory a vlsi implementation of the symbolics architecture starting in 1987 several machines based on the ivory processor were developed boards for suns and macs stand alone workstations and even embedded systems i machine custom lsi 32 bit address symbolics xl 400 ux 400 macivory ii in 1989 available platforms were symbolics xl 1200 macivory iii ux 1200 zora nxp1000 pizza box texas instruments shrank the explorer into silicon as the microexplorer which was offered as a card for the apple mac ii lmi abandoned the cadr architecture and developed its own k machine 91 6 93 but lmi went bankrupt before the machine could be brought to market before its demise lmi was working on a distributed system for the lambda using moby space 91 7 93 these machines had hardware support for various primitive lisp operations data type testing cdr coding and also hardware support for incremental garbage collection they ran large lisp programs very efficiently the symbolics machine was competitive against many commercial super minicomputers but was never adapted for conventional purposes the symbolics lisp machines were also sold to some non ai markets like computer graphics modeling and animation the mit derived lisp machines ran a lisp dialect named lisp machine lisp descended from mit s maclisp the operating systems were written from the ground up in lisp often using object oriented extensions later these lisp machines also supported various versions of common lisp with flavors new flavors and common lisp object system clos interlisp bbn and xerox edit bolt beranek and newman bbn developed its own lisp machine named jericho 91 8 93 which ran a version of interlisp it was never marketed frustrated the whole ai group resigned and were hired mostly by xerox so xerox palo alto research center had simultaneously with greenblatt s own development at mit developed their own lisp machines which were designed to run interlisp and later common lisp the same hardware was used with different software also as smalltalk machines and as the xerox star office system these included the xerox 1100 dolphin 1979 the xerox 1132 dorado the xerox 1108 dandelion 1981 the xerox 1109 dandetiger and the xerox 1186 6085 daybreak the operating system of the xerox lisp machines has also been ported to a virtual machine and is available for several platforms as a product named medley the xerox machine was well known for its advanced development environment interlisp d the rooms window manager for its early graphical user interface and for novel applications like notecards one of the first hypertext applications xerox also worked on a lisp machine based on reduced instruction set computing risc using the xerox common lisp processor and planned to bring it to market by 1987 91 9 93 which did not occur integrated inference machines edit in the mid 1980s integrated inference machines iim built prototypes of lisp machines named inferstar 91 10 93 developments of lisp machines outside the united states edit in 1984 85 a uk firm racal norsk a joint subsidiary of racal and norsk data attempted to repurpose norsk data s nd 500 supermini as a microcoded lisp machine running cadr software the knowledge processing system kps 91 11 93 there were several attempts by japanese manufacturers to enter the lisp machine market the fujitsu facom alpha 91 12 93 mainframe co processor ntt s elis 91 13 93 91 14 93 toshiba s ai processor aip 91 15 93 and nec s lime 91 16 93 several university research efforts produced working prototypes among them are kobe university s takitac 7 91 17 93 riken s flats 91 18 93 and osaka university s evlis 91 19 93 in france two lisp machine projects arose m3l 91 20 93 at toulouse paul sabatier university and later maia 91 21 93 in germany siemens designed the risc based lisp co processor colibri 91 22 93 91 23 93 91 24 93 91 25 93 end of the lisp machines edit with the onset of the ai winter and the early beginnings of the microcomputer revolution which would sweep away the minicomputer and workstation makers cheaper desktop pcs soon could run lisp programs even faster than lisp machines with no use of special purpose hardware their high profit margin hardware business eliminated most lisp machine makers had gone out of business by the early 90s leaving only software based firms like lucid inc or hardware makers who had switched to software and services to avoid the crash as of january 160 2015 91 update 93 besides xerox and ti symbolics is the only lisp machine firm still operating selling the open genera lisp machine software environment and the macsyma computer algebra system 91 26 93 91 27 93 legacy edit several attempts to write open source emulators for various lisp machines have been made cadr emulation 91 28 93 symbolics l lisp machine emulation 91 29 93 the e3 project ti explorer ii emulation 91 30 93 meroko ti explorer i 91 31 93 and nevermore ti explorer i 91 32 93 on 3 october 2005 the mit released the cadr lisp machine source code as open source 91 33 93 in september 2014 alexander burger developer of picolisp announced pilmcu an implementation of picolisp in hardware 91 34 93 the bitsavers pdf document archive 91 35 93 has pdf versions of the extensive documentation for the symbolics lisp machines 91 36 93 the ti explorer 91 37 93 and microexplorer 91 38 93 lisp machines and the xerox interlisp d lisp machines 91 39 93 applications edit domains using the lisp machines were mostly in the wide field of artificial intelligence applications but also in computer graphics medical image processing and many others the main commercial expert systems of the 80s were available intellicorp s knowledge engineering environment kee knowledge craft from the carnegie group inc and art automated reasoning tool from inference corporation 91 40 93 technical overview edit initially the lisp machines were designed as personal workstations for software development in lisp they were used by one person and offered no multi user mode the machines provided a large black and white bitmap display keyboard and mouse network adapter local hard disks more than 1 mb ram serial interfaces and a local bus for extension cards color graphics cards tape drives and laser printers were optional the processor did not run lisp directly but was a stack machine with instructions optimized for compiled lisp the early lisp machines used microcode to provide the instruction set for several operations type checking and dispatching was done in hardware at runtime for example only one addition operation could be used with various numeric types integer float rational and complex numbers the result was a very compact compiled representation of lisp code the following example uses a function that counts the number of elements of a list for which a predicate returns true defun example count predicate list let count 0 dolist i list count when funcall predicate i incf count the disassembled machine code for above function for the ivory microprocessor from symbolics command disassemble compile 39 example count 0 entry 2 required 0 optional creating predicate and list 2 push 0 creating count 3 push fp 3 list 4 push nil creating i 5 branch 15 6 set to cdr push car fp 5 7 set sp to address save tos sp 1 10 start call fp 2 predicate 11 push fp 6 i 12 finish call 1 value 13 branch false 15 14 increment fp 4 count 15 endp fp 5 16 branch false 6 17 set sp to address sp 2 20 return single stack the operating system used virtual memory to provide a large address space memory management was done with garbage collection all code shared a single address space all data objects were stored with a tag in memory so that the type could be determined at runtime multiple execution threads were supported and termed processes all processes ran in the one address space all operating system software was written in lisp xerox used interlisp symbolics lmi and ti used lisp machine lisp descendant of maclisp with the appearance of common lisp common lisp was supported on the lisp machines and some system software was ported to common lisp or later written in common lisp some later lisp machines like the ti microexplorer the symbolics macivory or the symbolics ux400 1200 were no longer complete workstations but boards designed to be embedded in host computers apple macintosh ii and sun 3 or sun 4 some lisp machines such as the symbolics xl1200 had extensive graphics abilities using special graphics boards these machines were used in domains like medical image processing 3d animation and cad see also edit icad example of knowledge based engineering software originally developed on a lisp machine that was useful enough to be then ported via common lisp to unix orphaned technology references edit newquist h p 1 march 1994 the brain makers sams publishing isbn 160 978 0672304125 target sinclair 30 september 2018 a short history of chaosnet two bit history retrieved 6 december 2021 moon david a 1985 architecture of the symbolics 3600 acm sigarch computer architecture news portal acm org 13 3 76 83 doi 10 1145 327070 327133 s2cid 160 17431528 levy s hackers penguin usa 1984 moon 1985 k machine moby space archived 25 february 2012 at the wayback machine patent application 4779191 computing facilities for ai a survey of present and near future options ai magazine 2 1 1981 the aaai 86 conference exhibits new directions for commercial ai vlsi lisp machine implementations are coming ai magazine 8 1 1987 the aaai 86 conference exhibits new directions for commercial ai a new lisp machine vendor ai magazine 8 1 1987 retrieved 12 november 2011 computer algebra in norway racal norsk kps 5 and kps 10 multi user lisp machines springer link doi 10 1007 3 540 15984 3 297 cite journal cite journal requires 124 journal help facom alpha computer museum ipsj retrieved 12 november 2011 ntt elis computer museum ipsj 9 september 1983 retrieved 12 november 2011 yasushi hibino 25 august 1990 a 32 bit lisp processor for the al workstation elis with a multiple programming paradigm language tao journal of information processing nii 13 2 156 164 retrieved 12 november 2011 mitsuo saito 25 august 1990 architecture of an ai processor chip ip1704 journal of information processing nii 13 2 144 149 retrieved 12 november 2011 nec lime lisp machine computer museum ipsj retrieved 12 november 2011 kobe university lisp machine computer museum ipsj 10 february 1979 retrieved 12 november 2011 riken flats numerical processing computer computer museum ipsj retrieved 12 november 2011 evlis machine computer museum ipsj retrieved 12 november 2011 m3l a lisp machine limsi retrieved 12 november 2011 maia machine for artificial intelligence limsi retrieved 12 november 2011 hafer christian plankl josef schmidt franz josef 1991 colibri a coprocessor for lisp based on risc vlsi for artificial intelligence and neural networks boston ma springer 47 56 doi 10 1007 978 1 4615 3752 6 5 isbn 160 978 1 4613 6671 3 m ller schloer 1988 bewertung der risc methodik am beispiel colibri in bode a ed risc architekturen 91 risc architectures 93 in german bi hafer christian plankl josef schmitt fj 7 9 march 1990 colibri ein risc lisp system 91 colibri a risc lisp system 93 architektur von rechensystemen tagungsband in german m nchen de 11 itg gi fachtagung legutko christian sch fer eberhard tappe j rgen 9 11 march 1988 die befehlspipeline des colibri systems 91 the instruction pipeline of the colibri system 93 architektur und betrieb von rechensystemen tagungsband informatik fachberichte in german paderborn de 10 itg gi fachtagung 168 142 151 doi 10 1007 978 3 642 73451 9 12 isbn 160 978 3 540 18994 7 symbolics txt a few things i know about lisp machines cadr emulation unlambda retrieved 12 november 2011 symbolics l lisp machine emulation unlambda 28 may 2004 retrieved 12 november 2011 the e3 project ti explorer ii emulation unlambda retrieved 12 november 2011 meroko emulator ti explorer i unlambda retrieved 12 november 2011 nevermore emulator ti explorer i unlambda retrieved 12 november 2011 mit cadr lisp machine source code heeltoe retrieved 12 november 2011 announce picolisp in hardware pilmcu bitsavers pdf document archive bitsavers retrieved 12 november 2011 symbolics documentation bitsavers retrieved 12 november 2011 ti explorer documentation bitsavers 15 may 2003 retrieved 12 november 2011 ti microexplorer documentation bitsavers 9 september 2003 retrieved 12 november 2011 xerox interlisp documentation bitsavers 24 march 2004 retrieved 12 november 2011 richter mark ai tools and techniques ablex publishing corporation usa 1988 chapter 3 an evaluation of expert system development tools general lisp machine progress report alan bawden richard greenblatt jack holloway thomas knight david a moon daniel weinreb ai lab memos ai 444 1977 cadr thomas knight david a moon jack holloway guy l steele ai lab memos aim 528 1979 design of lisp based processors or scheme a dielectric lisp or finite memories considered harmful or lambda the ultimate opcode guy lewis steele gerald jay sussman ai lab memo aim 514 1979 david a moon chaosnet a i memo 628 massachusetts institute of technology artificial intelligence laboratory june 1981 implementation of a list processing machine tom knight master s thesis lisp machine manual 6th ed richard stallman daniel weinreb david a moon 1984 anatomy of a lisp machine paul graham ai expert december 1988 free as in freedom richard stallman s crusade for free software external links edit symbolics website medley bitsavers pdf documents lmi documentation mit cons documentation mit cadr documentation lisp machine manual chinual the lisp machine manual 4th edition july 1981 the lisp machine manual 6th edition html xsl version the lisp machine manual information and code for lmi lambda and lmi k machine jaap weel s lisp machine webpage at the wayback machine 32 archived 23 june 2015 a set of links and locally stored documents regarding all manner of lisp machines a few things i know about lisp machines a set of links mostly discussion of buying lisp machines ralf m ller s symbolics lisp machine museum vintage computer festival pictures of some lisp machines one running genera lispmachine net lisp books and information lisp machines timeline a timeline of symbolics and others lisp machines in french pr sentation g n rale du projet m3l an account of french efforts in the same vein discussion if it works it s not ai a commercial look at artificial intelligence startups symbolics inc a failure of heterogenous engineering pdf my lisp experiences and the development of gnu emacs transcript of a speech richard stallman gave about emacs lisp and lisp machines vtelisp programming languagefeatures automatic storage management conditionals dynamic typing higher order functions linked lists macros m expressions deprecated read eval print loop recursion s expressions self hosting compiler tree data structures object systems common lisp object system clos commonloops flavors implementationsstandardizedcommonlisp allegro common lisp armed bear common lisp abcl clisp clozure cl cmu common lisp cmucl corman common lisp embeddable common lisp ecl gnu common lisp gcl lispworks macintosh common lisp mocl movitz poplog steel bank common lisp sbcl symbolics common lisp scheme history bigloo chez scheme chicken gambit game oriented assembly lisp goal gnu guile ikarus jscheme kawa larceny mit gnu scheme multilisp pocket scheme racket rscheme scheme 48 scm siod t tinyscheme islisp openlisp unstandardizedlogo mswlogo netlogo starlogo ucblogo arc autolisp bbn lisp clojure dylan apple history emacs lisp eulisp franz lisp pc lisp hy interlisp knowledge engineering environment lisp lelisp lfe lisp machine lisp maclisp mdl mlisp newlisp nil pc lisp picolisp portable standard lisp rpl s 1 lisp skill spice lisp zetalispoperating system list common lisp interface manager mcclim genera scsh hardware lisp machine ti explorer space cadet keyboard communityof practicetechnical standards scheme requests for implementation common lisp hyperspec x3j13 educationbooks common lisp the language how to design programs htdp on lisp practical common lisp structure and interpretation of computer programs sicp curriculum programbydesign organizationsbusiness apple computer bolt beranek and newman harlequin lucid inc symbolics xanalys education massachusetts institute of technology mit mit computer science and artificial intelligence laboratory csail stanford artificial intelligence laboratory university of california berkeley people edmund berkeley daniel g bobrow william clinger r kent dybvig matthias felleisen robert bruce findler matthew flatt phyllis fox paul graham richard greenblatt timothy p hart louis hodes mike levin david luckham john mccarthy robert tappan morris joel moses david park steve russell richard stallman common lisp scott fahlman richard p gabriel philip greenspun 10th rule david a moon kent pitman guy l steele jr daniel weinreb scheme matthias felleisen shriram krishnamurthi guy l steele jr gerald jay sussman julie sussman logo hal abelson denison bollay wally feurzeig brian harvey seymour papert mitchel resnick cynthia solomon list category category retrieved from https en wikipedia org w index php title lisp machine amp oldid 1129640290 categories lisp programming language computer workstationshistory of artificial intelligencehigh level language computer architecturehidden categories webarchive template wayback linkscs1 errors missing periodicalcs1 german language sources de articles with short descriptionshort description is different from wikidatause dmy dates from july 2020all articles with unsourced statementsarticles with unsourced statements from october 2009articles with unsourced statements from may 2013articles with unsourced statements from march 2007all accuracy disputesarticles with disputed statements from march 2019articles that may contain original research from june 2021all articles that may contain original researcharticles containing potentially dated statements from january 2015all articles containing potentially dated statementsarticles with french language sources fr 