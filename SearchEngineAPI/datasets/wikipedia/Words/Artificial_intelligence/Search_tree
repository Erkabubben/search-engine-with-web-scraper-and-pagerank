search tree from wikipedia the free encyclopedia jump to navigation jump to search data structure in tree form sorted for fast lookup not to be confused with tree search in computer science a search tree is a tree data structure used for locating specific keys from within a set in order for a tree to function as a search tree the key for each node must be greater than any keys in subtrees on the left and less than any keys in subtrees on the right 91 1 93 the advantage of search trees is their efficient search time given the tree is reasonably balanced which is to say the leaves at either end are of comparable depths various search tree data structures exist several of which also allow efficient insertion and deletion of elements which operations then have to maintain tree balance search trees are often used to implement an associative array the search tree algorithm uses the key from the key value pair to find a location and then the application stores the entire key value pair at that particular location contents 1 types of trees 1 1 binary search tree 1 2 b tree 1 3 a b tree 1 4 ternary search tree 2 searching algorithms 2 1 searching for a specific key 2 1 1 recursive 2 1 2 iterative 2 2 searching for min and max 2 2 1 minimum 2 2 2 maximum 3 see also 4 references types of trees edit binary search tree binary search tree edit main article binary search tree a binary search tree is a node based data structure where each node contains a key and two subtrees the left and right for all nodes the left subtree s key must be less than the node s key and the right subtree s key must be greater than the node s key these subtrees must all qualify as binary search trees the worst case time complexity for searching a binary search tree is the height of the tree which can be as small as o log n for a tree with n elements b tree edit main article b tree b trees are generalizations of binary search trees in that they can have a variable number of subtrees at each node while child nodes have a pre defined range they will not necessarily be filled with data meaning b trees can potentially waste some space the advantage is that b trees do not need to be re balanced as frequently as other self balancing trees due to the variable range of their node length b trees are optimized for systems that read large blocks of data they are also commonly used in databases the time complexity for searching a b tree is o log n a b tree edit main article a b tree an a b tree is a search tree where all of its leaves are the same depth each node has at least a children and at most b children while the root has at least 2 children and at most b children a and b can be decided with the following formula 91 2 93 2 x2264 a x2264 b 1 2 displaystyle 2 leq a leq frac b 1 2 the time complexity for searching an a b tree is o log n ternary search tree edit main article ternary search tree a ternary search tree is a type of tree that can have 3 nodes a low child an equal child and a high child each node stores a single character and the tree itself is ordered the same way a binary search tree is with the exception of a possible third node searching a ternary search tree involves passing in a string to test whether any path contains it the time complexity for searching a balanced ternary search tree is o log n searching algorithms edit searching for a specific key edit assuming the tree is ordered we can take a key and attempt to locate it within the tree the following algorithms are generalized for binary search trees but the same idea can be applied to trees of other formats recursive edit search recursive key node if node is null return empty tree if key lt node key return search recursive key node left else if key gt node key return search recursive key node right else return node iterative edit searchiterative key node currentnode 160 node while currentnode is not null if currentnode key key return currentnode else if currentnode key gt key currentnode 160 currentnode left else currentnode 160 currentnode right searching for min and max edit in a sorted tree the minimum is located at the node farthest left while the maximum is located at the node farthest right 91 3 93 minimum edit findminimum node if node is null return empty tree min 160 node while min left is not null min 160 min left return min key maximum edit findmaximum node if node is null return empty tree max 160 node while max right is not null max 160 max right return max key see also edit trie binary tree depth first search references edit black paul and pieterse vreda 2005 search tree dictionary of algorithms and data structures toal ray a b trees gildea dan 2004 binary search tree vtetree data structuressearch trees dynamic sets associative arrays 2 3 2 3 4 aa a b avl b b b bx optimal 160 binary search dancing htree interval order statistic left leaning 160 red black scapegoat splay t treap ub weight balanced heaps binary binomial brodal fibonacci leftist pairing skew van emde boas weak tries ctrie c trie compressed adt hash radix suffix ternary search x fast y fast spatial data partitioning trees ball bk bsp cartesian hilbert r k d implicit k d m metric mvp octree ph priority r quad r r r segment vp x other trees cover exponential fenwick finger fractal tree index fusion hash calendar idistance k ary left child right sibling link cut log structured merge merkle pq range spqr top authority control national libraries germany retrieved from https en wikipedia org w index php title search tree amp oldid 1123746773 categories search treessearch algorithmshidden categories articles with short descriptionshort description matches wikidataarticles with gnd identifiers 